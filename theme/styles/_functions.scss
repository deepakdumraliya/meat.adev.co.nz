// For mitigating scssphp bug
$TEMPORARY_ABOVE_GLOBAL: 0;
$TEMPORARY_BELOW_GLOBAL: 0;

///
/// convert a value in px (as per the design) to a rem unit (for better scaling to user font preferences)
/// @param	string 	the px value (including px suffix for code clarity where the function is called)
/// @uses 	string	the base font size of the design, set in _variables (usually 16px per browser defaults)
/// @return the rem unit
///
@function rem($px) 
{
	@return ($px / $BASE_FONT_SIZE) * 1rem;
}

///
/// Only displays styles above a certain number of pixels wide
/// @param		number	$aboveAmount	The number of pixels to be above
/// @content							The content to display below that number of pixels
/// @output								Styles to display below that width
///
@mixin above($aboveAmount)
{
	// Mitigates scssphp bug, which is not scoping variables correctly
	$TEMPORARY_ABOVE_GLOBAL: $aboveAmount !global;
	$belowAmount: $TEMPORARY_BELOW_GLOBAL !global;
	
	@media (min-width: $aboveAmount)
	{
		@content;
	}
}

///
/// Only displays styles below a certain number of pixels wide
/// @param		number	$belowAmount	The number of pixels to be below
/// @content							The content to display below that number of pixels
/// @output								Styles to display below that width
///
@mixin below($belowAmount)
{
	// Mitigates scssphp bug, which is not scoping variables correctly
	$TEMPORARY_BELOW_GLOBAL: $belowAmount !global;
	$aboveAmount: $TEMPORARY_ABOVE_GLOBAL !global;
	
	@media (max-width: $belowAmount - 1px)
	{
		@content;
	}
}

///
/// Only displays styles between a certain range of pixels wide
/// @param		number	$pixels		The number of pixels to be above or equal to
/// @param		number	$pixels		The number of pixels to be below or equal to
/// @content						The content to display between the range of pixels
/// @output							Styles to display between that range
///
@mixin between($minPixels, $maxPixels)
{
	@media (min-width: $minPixels) and (max-width: $maxPixels)
	{
		@content;
	}
}

///
/// Creates a triple stack using a background gradient
/// @param		colour	$bars			The bar colour
/// @param		colour	$background		The background colour (usually transparent)
/// @param		bool	$horizontal		If the gradient should be horizontal
/// @output								Styles for that type of gradient
///
@mixin burger($bars, $background: rgba(255,255,255,0), $bar1End: 18, $horizontal: false)
{
	$spacing: ceil((100 - ($bar1End * 3))/2);
	$bar2Start: $bar1End;
	$bar2End: $bar2Start + $spacing;
	$bar3Start: $bar2End;
	$bar3End: $bar3Start + $bar1End;
	$bar4Start: $bar3End;
	$bar4End: $bar4Start + $spacing;
	$bar5Start: $bar4End;

	background: $bars;
	background: -moz-linear-gradient(top,  #{$bars} 0%, #{$bars} #{$bar1End + "%"}, #{$background} #{$bar2Start + "%"}, #{$background} #{$bar2End + "%"}, #{$bars} #{$bar3Start + "%"}, #{$bars} #{$bar3End + "%"}, #{$background} #{$bar4Start + "%"}, #{$background} #{$bar4End + "%"}, #{$bars} #{$bar5Start + "%"}, #{$bars} 100%);
	background: -webkit-linear-gradient(top,  #{$bars} 0%, #{$bars} #{$bar1End + "%"} , #{$background} #{$bar2Start + "%"}, #{$background} #{$bar2End + "%"}, #{$bars} #{$bar3Start + "%"}, #{$bars} #{$bar3End + "%"}, #{$background} #{$bar4Start + "%"}, #{$background} #{$bar4End + "%"}, #{$bars} #{$bar5Start + "%"}, #{$bars} 100%);
	background: linear-gradient(to bottom, #{$bars} 0%, #{$bars} #{$bar1End + "%"}, #{$background} #{$bar2Start + "%"}, #{$background} #{$bar2End + "%"}, #{$bars} #{$bar3Start + "%"}, #{$bars} #{$bar3End + "%"}, #{$background} #{$bar4Start + "%"}, #{$background} #{$bar4End + "%"}, #{$bars} #{$bar5Start + "%"}, #{$bars} 100%);
}


///
/// Creates a simple gradient
/// @param		colour	$start			The start colour
/// @param		colour	$end			The end colour
/// @param		bool	$horizontal		If the gradient should be horizontal
/// @output								Styles for that type of gradient
///
@mixin gradient($start, $end, $horizontal: false)
{
	background: linear-gradient(if($horizontal, left, top), $start 0%, $end 100%);
}

///
/// Applies styles to all headings
/// @content	The styles to apply
/// @output		Applies styles to headings from h1 through h6
///
@mixin headings
{
	h1,
	h2,
	h3,
	h4,
	h5,
	h6
	{
		@content;
	}
}

/// Applies styles to all the kinds of input you could get in a form
/// @content	The styles to apply
/// @output		Applies styles to various inputs
///
@mixin form-inputs
{
	input[type=text],
	input[type=password],
	input[type=number],
	input[type=email],
	input[type=tel],
	input[type=date],
	input[type=datetime-local],
	input[type=month],
	input[type=search],
	input[type=time],
	input[type=url]
	{
		@content;
	}
}

/// Applies styles to all the kinds of fields you could get in a form
/// @content	The styles to apply
/// @output		Applies styles to various form fields
///
@mixin form-fields
{
	@include form-inputs
	{
		@content;
	}

	select,
	textarea,
	.upload-button
	{
		@content;
	}
}

/// Iterates over a map of properties and outputs them
/// @param		map		$properties		The properties to iterate over
/// @output								All of the properties
@mixin iterate-over($properties)
{
	@each $property, $value in $properties
	{
		#{$property}: $value;
	}
}

///
/// Applies styles to the hover, focus and active pseudoclasses of an element
/// @content	The styles to apply
/// @output		Hover, focus and active styles for that element
///
@mixin hover
{
	&:hover,
	&:focus,
	&:active
	{
		@content;
	}
}

///
/// Applies provided styles to the placeholder of the current element
/// @content	The styles to apply
/// @output		Styles, applied to the element
///
//noinspection CssInvalidPseudoSelector
@mixin placeholder
{
	&::placeholder
	{
		@content;
	}
}

///
/// Only displays styles below the responsive limit
/// @content	The content to display below the responsive limit
/// @output		Styles to display below the limit
///
@mixin responsive
{
	@include below($NAV_BREAKPOINT)
	{
		@content;
	}
}

///
/// Targets print styles
/// @content	The content to display to the printer
/// @output		The styles, wrapped in a print media query
///
@mixin print
{
	@media print
	{
		@content;
	}
}

///
/// Creates vendor specific versions of a style
/// @param	string	$property	The property to create each style for
/// @param	list	$value		The value for that style
/// @output						Vendor specific versions of each style
///
//noinspection CssInvalidMediaFeature
@mixin vendor-specific($property, $value)
{
	#{$property}: $value;
	@each $vendor in ("ms", "moz", "o", "webkit")
	{
		#{"-" + $vendor + "-" + $property}: $value;
	}
}

///
/// Turn an element or :before, :after into absolutely positioned block
///
%absolute-pseudo-block
{
	content: '';
	display: block;
	position: absolute;
}

///
/// Removes element from page flow
///
%clearfix
{
	&:before,
	&:after
	{
		content: ".";
		clear: both;
		display: block;
		visibility: hidden;
		height: 0;
		line-height: 0;
	}
}
